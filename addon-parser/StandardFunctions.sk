function product(ns: numbers) :: Number:
	set {_product} to 1 * 3
	loop {_ns::*}:
		set {_product} to {_product} * loop-number
	return {_product}

function sum(ns: numbers) :: Number:
	set {_sum} to 0
	loop {_ns::*}:
		add loop-number to {_sum}
	return {_sum}

function tan(n: number) :: Number:
	return sin(n) / cos(n)

function median(numbers: numbers) :: Number:
	set {_medianIndex} to size of {_numbers::*} / 2
	set {_firstIndex} to floored {_medianIndex}
	if {_firstIndex} is {_medianIndex}:
		return {_numbers::%{_medianIndex}%}
	else:
		#take the average of two numbers
		return ({_numbers::%{_firstIndex}%} + {_numbers::%{_firstIndex} + 1%}) * 0.5

function mean(numbers: numbers) :: Number:
	return sum({_numbers::*}) / size of {_numbers::*}

function factorial(number: number) :: Number:
	if {_number} > 171:
		return infinity value
	set {_factorial} to 1
	loop {_number} times:
		set {_factorial} to {_factorial} * {_number}
	return {_factorial}

function min(ns: numbers) :: Number:
	set {_minimum} to infinity value
	loop {_numbers::*}:
		loop-number < {_minimum}
		set {_minimum} to loop-number
	return {_minimum}

function max(ns: numbers) :: Number:
	set {_maximum} to -infinity value
	loop {_numbers::*}:
		loop-number > {_maximum}
		set {_maximum} to loop-number
	return {_maximum}

function combinations(options: number, selected: number) :: Number:
	#if most of the options are selected, then we need to calculate the amount of combinations that the unselected options make.
	set {_dimensions} to min({_selected}, {_options} - {_selected})
	#all options visually make up a half-square triangle when laid out:
	#example:
	#4 options, 2 selected:
	#12
	#13 23
	#14 24 34
	#we need to calculate the area of this triangle.
	#the area of a triangle is width * height / 2, but we need to account for the 'sticking out' parts. therefore, we add 1: (width + 1) * height / 2
	#the above is for 2 dimensions. but we need to account for any amount of dimensions.
	#n-dimensional:
	#let v be the volume of a cubed n-dimensional triangle
	#let n be the amount of dimensions
	#let s be the size of the cubed n-dimensional triangle
	#perfect triangle volume: s * (s / 2) ^ (n - 1)
	#adjustment: (s ^ (n - 1)) / 2
	#v = s * (s / 2) ^ (n - 1) + (s ^ (n - 1)) / 2
	set {_trianglesize} to {_options} - 1
	return {_trianglesize} * ({_trianglesize} / 2) ^ ({_dimensions} - 1) + ({_trianglesize} ^ ({_dimensions} - 1)) / 2

function permutations(options: number, selected: number) :: Number:
	set {_permutations} to 1
	#for example: 4 options, 2 selected: 2 * 3 * 4 permutations
	loop integers from ({_options} - {_selected} + 1) to {_options}:
		set {_permutations} to {_permutations} * loop-number
	return {_permutations}

function sqrt(n: number) :: Number:
	return {_n} ^ 0.5

function round(n: number, d: number = 0) :: Number:
	#when d is 2, just multiply by 100, round and divide again.
	set {_n} to {_n} * 10 ^ {_d}
	set {_floored} to floor({_n})
	if {_n} - {_floored} < 0.5:
		set {_n} to {_floored}
	else:
		set {_n} to {_floored} + 1
	return {_n} / {_d}

function ceiling(n: number) :: long:
	return ceil({_n})
function abs(n: number) :: Number:
	if {_n} < 0:
		return 0 - {_n}
	else:
		return {_n}